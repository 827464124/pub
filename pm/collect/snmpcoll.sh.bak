#!/bin/sh
###########################################################
# 采集任务调度程序
#----------------------------------------------------------
# 调用方式：* * * * *于crontab中
# 输入参数：无
# 输出参数：无
# 调用：    采集任务配置文件
#----------------------------------------------------------
# 采集任务配置文件格式
# EquipID|客户ID|采集对象|会话用户名|执行命令|采集内容|任务启用时间|最后采集时间|采集周期(min)
#----------------------------------------------------------
# Written by zhung 
#               2007-01-05
############################################################
#set -x
WORK_DIR=/home/nuoen/ioss/pm/collect

. $WORK_DIR/snmpcol.env

#----------------------------------------------------------------------------------------------
# 函数部分
#----------------------------------------------------------------------------------------------
#执行采集
ExecSnmpCol ()
{
	task_var=$1
	#拆分变量
	EquipId=`echo $task_var|awk -F \| '{print $1}'`
	CustomId=`echo $task_var|awk -F \| '{print $2}'`
	ColIp=`echo $task_var|awk -F \| '{print $3}'`
	CommUser=`echo $task_var|awk -F \| '{print $4}'`
	ExecFileName=`echo $task_var|awk -F \| '{print $5}'`
	BlockName=`echo $task_var|awk -F \| '{print $6}'`
	FirstTime=`echo $task_var|awk -F \| '{print $7}'`
	LastColTime=`echo $task_var|awk -F \| '{print $8}'`
	ColPeriod=`echo $task_var|awk -F \| '{print $9}'`
	#为了避免任务因为异常没有执行导致时间停滞，上次执行采集时间与当前系统时间比较
	#并同时更新任务列表文件
	NowTime=`date +"%Y%m%d%H%M"`
	IntTime=`date +"%Y%m%d%H00"`
	I30Time=`date +"%Y%m%d%H30"`
	#系统要求采集最小间隔为5分钟，所以每小时的0分都是采集点，可以从这个最小的采集点开始计算
	#最后采集时间可能存在异常导致无法正常采集产生时间后延，通过判断可以减少运算次数
	if [ $NowTime -ge $I30Time ]
	then 
		PeriodTime=$I30Time
	else
		PeriodTime=$IntTime
	fi
	while [ $NowTime -ge $PeriodTime ]
	do
		PeriodTime=`GetPeriodTime $PeriodTime $ColPeriod`
	done
	#循环结束的时间肯定比当前时间大，前推一个采集周期为结束时间，2个周期为开始时间
	iTemp=`expr 0 - $ColPeriod`
	EndTime=`GetPeriodTime $PeriodTime $iTemp`
	StartTime=`GetPeriodTime $EndTime $iTemp`
	#判断此时间是否已执行过
	if [ $EndTime -gt $LastColTime ]
	then
	  #组合文件名称
		ColFileName="${CustomId}-#-${EquipId}-#-${BlockName}-#-${StartTime}-#-${EndTime}-#-${ColPeriod}.pt"

		#执行采集命令
		#替换命令中的变量
		cat $CMDFILE_DIR/$ExecFileName | sed -e "s/__CommUser__/$CommUser/" \
		                                  -e "s/__IP__/$ColIp/" \
		                            > $CMDFILE_DIR/$ExecFileName.cmd
		while read aExecCmd
		do
			echo "`date +'%Y-%m-%d %H:%M:%S'` Exec ${aExecCmd} to File ${ColFileName}" >> $LOGFILE
			eval $aExecCmd 1>> $COLFILE_DIR/$ColFileName 2>>$LOGFILE 		
		done < $CMDFILE_DIR/$ExecFileName.cmd
		RAWFILE="${CustomId}-#-${EquipId}-#-${BlockName}-#-${StartTime}-#-${EndTime}-#-${ColPeriod}.raw"
		mv $COLFILE_DIR/$ColFileName $COLFILE_DIR/$RAWFILE
		rm -f $CMDFILE_DIR/$ExecFileName.cmd
		#修改最后采集时间，由于SNMP没有补采的可行性，所以不考虑补采
		NewTask="${EquipId}|${CustomId}|${ColIp}|${CommUser}|${ExecFileName}|${BlockName}|${FirstTime}|${EndTime}|${ColPeriod}"
		cat $TASKFILE | sed -e "s/${task_var}/${NewTask}/" >$TASKFILE.tmp
		mv -f $TASKFILE.tmp $TASKFILE
	fi
	
}
#获得时间
GetPeriodTime ()
{
	echo `perl $WORK_DIR/GetPeriodTime.pl $1 $2 2>>$LOGFILE`
}
#-------------------------------------------------------------------------------------------------------
#函数部分结束
#-------------------------------------------------------------------------------------------------------
echo "`date +'%Y-%m-%d %H:%M:%S'` Start Snmp Start Collect..." >> $LOGFILE
#判断此进程是否已运行，如果运行则退出
if test -f $WORK_DIR/.snmpcoll.pid
then
   # File exists so parser may be running, get the pid and see if is running
   pid=`cat $WORK_DIR/.snmpcoll.pid`
   # See if a process is running with that process id
   if test -n "$pid"
   then
      PSOPTS="-p"
      ps $PSOPTS $pid > /dev/null
      if test $? -eq 0
      then
         ps $PSOPTS $pid | grep -i snmpcoll > /dev/null
         if test $? -eq 0
         then
            # Process is already running so exit
            exit 3
         fi
      else
         # Try the ps listing again as it is not always reliable
         ps $PSOPTS $pid > /dev/null
         if test $? -eq 0
         then
            ps $PSOPTS $pid | grep snmpcoll > /dev/null
            if test $? -eq 0
            then
               # Process is already running so exit
               exit 3
            fi
         fi
      fi
   fi
fi
echo $$ > $WORK_DIR/.snmpcoll.pid
#判断是否有队列存在，如果存在则先执行
if test -f $WORK_DIR/.snmpcol.queue
then
   cat $WORK_DIR/.snmpcol.queue |
   while read aQueueTask
   	do
   		ExecSnmpCol $aQueueTask
   	done
   rm -f $WORK_DIR/.snmpcol.queue
fi
if test -f $TASKFILE
then
   NowTime=`date +"%Y%m%d%H%M"`
   
   cat $TASKFILE |
	 while read aTask
   do
	   	#判断是否需要执行
	   	LastColTime=`echo $aTask|awk -F \| '{print $8}'`
			ColPeriod=`echo $aTask|awk -F \| '{print $9}'`
			NewTime=`GetPeriodTime $LastColTime $ColPeriod`
			echo "--------------$aTask---------------" >> $LOGFILE
			#执行条件：上次采集时间+采集周期<当前时间
			if [ $NewTime -le $NowTime ]
			then
			#如果需要执行则判断目前执行进程与设置的最大进程数的关系，如果允许则进入后台执行，否则加入队列
			#-3的进程为snmpd/ cmsnmpd /grep snmp
				TaskNum=`ps -ef|grep -i snmp|wc|awk '{print $1}'`
				TaskNum=`expr $TaskNum - 3`
				if [ $TaskNum -gt $PROCESSNUM ]
				then 
					echo $aTask >> $WORK_DIR/.snmpcol.queue
					echo "Now $TaskNum process running ..." >> $LOGFILE
				else
					ExecSnmpCol $aTask
				fi
			fi
   done
fi
#删除本次运行标记文件
rm -f $WORK_DIR/.snmpcoll.pid
echo "`date +'%Y-%m-%d %H:%M:%S'` End Snmp Collect..." >> $LOGFILE
